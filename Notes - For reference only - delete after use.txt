
Run the First Cursor Loop
Use the three-prompt loop we discussed:

Update OpenAPI for the API.

Implement API handler + tests.

Build UI screen calling that API.

---------------
feature folder
menus and page layout (add these layout rules to the ui-ux-style-guide.md and update the never_touch_list.md)
Role-driven menus, Role-driven menus

Work on
Feature folder
Add role-driven menu rules + context-switch pattern to ui-ux-style-guide.md
Add templates/partials/sidebar.html and templates/partials/topbar.html as never-touch items in never_touch_list.md so Cursor always extends them.
Add the DB-based role model into the authentication-authz.md
Update ui-ux-style-guide.md navigation section to say menu is generated from DB role mapping via helper function.

==============

Common types

feat: new feature

fix: bug fix

docs: docs only

chore: repo plumbing (config, deps, housekeeping)

refactor: code change w/o behavior change

perf: performance

test: tests

ci: CI changes

build: build/deps

style: formatting (no code meaning changes)

revert: revert a commit

=================
We won’t hardcode law; we’ll model capabilities so you can encode policy per site/state:

Leave categories & accruals (earned/privilege, casual, sick; monthly accrual rules; probation zero accrual; pro-rata on join/exit).

Carry-forward & caps (max balance, lapse rules, encashment eligibility).

Holiday calendars per location (national + state + company holidays).

Maternity/Adoption/Creche support as configurable policies; paternity optional policy.

Sandwich rules toggles (weekends/holidays inside a leave span count or not).

Medical certificate requirement thresholds for SL (e.g., >2 days).

Notice period & LOP handling when balance insufficient.

Election day paid leave per local norms (toggle by location).

Working hours & weekly off (for sandwich/encashment calculations).
